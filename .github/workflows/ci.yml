name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: catalog
          POSTGRES_PASSWORD: catalogpass
          POSTGRES_DB: gnaf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run migrations
      run: |
        # Wait for PostgreSQL to be ready
        until pg_isready -h localhost -p 5432 -U catalog; do sleep 1; done
        # Run migrations
        docker cp ./migrations/001_initial.sql postgres:/tmp/001_initial.sql
        docker cp ./migrations/002_sample_data.sql postgres:/tmp/002_sample_data.sql
        docker cp ./migrations/003_users.sql postgres:/tmp/003_users.sql
        docker exec postgres psql -U catalog -d gnaf -f /tmp/001_initial.sql
        docker exec postgres psql -U catalog -d gnaf -f /tmp/002_sample_data.sql
        docker exec postgres psql -U catalog -d gnaf -f /tmp/003_users.sql

    - name: Run tests
      run: |
        pytest -v

    - name: Build and run Docker
      run: |
        docker-compose up --build -d
        # Wait for services to be ready
        sleep 30
        # Run health check
        curl -f http://localhost:8000/health || exit 1

    - name: Deploy to production (if on main branch)
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production..."
        # Add your deployment commands here
