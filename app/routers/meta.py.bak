from fastapi import APIRouter, Depends, HTTPException, Body
from sqlalchemy.orm import Session
from .. import models
from ..auth import get_current_active_user
from ..database import get_db

router = APIRouter()

def _ds_to_dict(ds: models.DataSource):
    return {
        "id": ds.id,
        "name": ds.name,
        "path": ds.path,
        "created_at": ds.created_at.isoformat() if ds.created_at is not None else None
    }

def _tm_to_dict(tm: models.TableMeta):
    return {
        "id": tm.id,
        "schema_name": tm.schema_name,
        "table_name": tm.table_name,
        "description": tm.description,
        "source_id": tm.source_id
    }

@router.get("/datasources")
def list_datasources(skip: int = 0, limit: int = 100, db: Session = Depends(get_db), current_user: models.User = Depends(get_current_active_user)):
    total = db.query(models.DataSource).count()
    items = db.query(models.DataSource).order_by(models.DataSource.id).offset(skip).limit(limit).all()
    return {"items": [_ds_to_dict(d) for d in items], "total": total, "skip": skip, "limit": limit}

@router.get("/datasources/{ds_id}")
def get_datasource(ds_id: int, db: Session = Depends(get_db), current_user: models.User = Depends(get_current_active_user)):
    ds = db.query(models.DataSource).filter(models.DataSource.id == ds_id).first()
    if not ds:
        raise HTTPException(status_code=404, detail="DataSource not found")
    tms = db.query(models.TableMeta).filter(models.TableMeta.source_id == ds.id).order_by(models.TableMeta.id).all()
    return { **_ds_to_dict(ds), "table_meta": [_tm_to_dict(t) for t in tms] }

@router.get("/tablemeta")
def list_tablemeta(skip: int = 0, limit: int = 100, db: Session = Depends(get_db), current_user: models.User = Depends(get_current_active_user)):
    total = db.query(models.TableMeta).count()
    q = db.query(models.TableMeta).order_by(models.TableMeta.id).offset(skip).limit(limit).all()
    return {"items": [_tm_to_dict(t) for t in q], "total": total, "skip": skip, "limit": limit}

@router.get("/tablemeta/{tm_id}")
def get_tablemeta(tm_id: int, db: Session = Depends(get_db), current_user: models.User = Depends(get_current_active_user)):
    tm = db.query(models.TableMeta).filter(models.TableMeta.id == tm_id).first()
    if not tm:
        raise HTTPException(status_code=404, detail="TableMeta not found")
    return _tm_to_dict(tm)

@router.delete("/tablemeta/{tm_id}")
def delete_tablemeta(tm_id: int, db: Session = Depends(get_db), current_user: models.User = Depends(get_current_active_user)):
    tm = db.query(models.TableMeta).filter(models.TableMeta.id == tm_id).first()
    if not tm:
        raise HTTPException(status_code=404, detail="TableMeta not found")
    db.delete(tm)
    db.commit()
    return {"detail": "deleted"}

@router.put("/tablemeta/{tm_id}")
def update_tablemeta(tm_id: int, payload: dict = Body(...), db: Session = Depends(get_db), current_user: models.User = Depends(get_current_active_user)):
    tm = db.query(models.TableMeta).filter(models.TableMeta.id == tm_id).first()
    if not tm:
        raise HTTPException(status_code=404, detail="TableMeta not found")
    allowed = {"schema_name", "table_name", "description"}
    for k, v in payload.items():
        if k in allowed:
            setattr(tm, k, v)
    db.add(tm)
    db.commit()
    db.refresh(tm)
    return _tm_to_dict(tm)
